from typing import Optional

from pydantic import BaseModel, Field
from starlette.status import (
    HTTP_400_BAD_REQUEST,
    HTTP_404_NOT_FOUND,
    HTTP_409_CONFLICT,
    HTTP_500_INTERNAL_SERVER_ERROR,
    HTTP_503_SERVICE_UNAVAILABLE,
)


class ErrorDetails(BaseModel):
    """
    Error Details - https://datatracker.ietf.org/doc/html/rfc7807
    """

    type: str = Field(
        "about:blank",
        description="A URI reference [RFC3986] - a unique identifier for the specific error type (e.g. 'https://example.com/error/validation-error')",
    )
    title: Optional[str] = Field(
        "Bad Request",
        description="A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4)",
    )
    status: int = Field(
        HTTP_400_BAD_REQUEST,
        description="The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.",
    )
    detail: str = Field(
        ...,
        description="A human-readable description of the specific error (e.g. 'The email address is not valid')",
    )
    instance: Optional[str] = Field(
        None,
        description="A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.",
    )

    @classmethod
    def from_exception(
        cls, exc: Exception, status_code: int = HTTP_400_BAD_REQUEST, **kwargs
    ):
        """
        Create an instance from an exception.

        :param exc: The exception to create the instance from.
        :param status_code: The status code to use for the instance.
        :param kwargs: Additional keyword arguments to pass to the constructor.
        :return: The instance created from the exception.
        """
        return cls(
            detail=str(exc), type=type(exc).__name__, status=status_code, **kwargs
        )

    @classmethod
    def get_status(cls) -> int:
        """
        Get the status code for the error.

        :return: The status code for the error.
        """
        return cls.__fields__["status"].default

    class Config:
        """
        Pydantic Config.
        """

        allow_population_by_field_name = True
        use_enum_values = True


class NotFoundAPIError(ErrorDetails):
    """
    Not Found API Error - 404
    """

    title: str = Field("Not Found", const=True)
    status: int = Field(HTTP_404_NOT_FOUND, const=True)


class ConflictAPIError(ErrorDetails):
    """
    Conflict API Error - 409
    """

    title: str = Field("Conflict", const=True)
    status: int = Field(HTTP_409_CONFLICT, const=True)


class ServiceUnavailableAPIError(ErrorDetails):
    """
    Service Unavailable API Error - 503
    """

    title: str = Field("Service Unavailable", const=True)
    status: int = Field(HTTP_503_SERVICE_UNAVAILABLE, const=True)


class InternalServerAPIError(ErrorDetails):
    """
    Internal Server API Error - 500
    """

    title: str = Field("Internal Server Error", const=True)
    status: int = Field(HTTP_500_INTERNAL_SERVER_ERROR, const=True)
