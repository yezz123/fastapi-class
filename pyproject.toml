[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fastapi_class"
description = "Simplifies class-based views for more organized and maintainable code in FastAPI."
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    { name = "Yasser Tahiri", email = "hello@yezz.me" },
]

classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Framework :: FastAPI",
    "Framework :: Pydantic",
    "Framework :: AsyncIO",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Internet :: WWW/HTTP :: Session",
    "Typing :: Typed",
]

dependencies = [
    "fastapi >=0.65.2,<0.96.0",
    "pydantic >=1.6.2,!=1.7,!=1.7.1,!=1.7.2,!=1.7.3,!=1.8,!=1.8.1,<2.0.0",
]

dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/yezz123/fastapi-class"
Funding = 'https://github.com/sponsors/yezz123'

[project.optional-dependencies]
lint = [
    "pre-commit==3.2.2",
    "mypy==1.2.0",
]
test = [
    "requests==2.28.2",
    "pytest==7.3.1",
    "pytest-asyncio == 0.21.0",
    "pytest-cov==4.0.0",
    "pytest-pretty==1.2.0",
]

[tool.hatch.version]
path = "fastapi_class/__init__.py"

[tool.isort]
profile = "black"
known_third_party = ["pydantic", "typing_extensions"]

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B018",  # Found useless expression
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-third-party = ["pydantic", "typing_extensions"]

[tool.mypy]
plugins = "pydantic.mypy"
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
ignore_missing_imports = true
disallow_untyped_defs = true

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "raise NotImplemented",
    "@overload",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]

[tool.pytest]
testpaths = "tests/"
log_cli = "1"
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format= "%Y-%m-%d %H:%M:%S"
asyncio_mode= "auto"
